package com.ren.ds.pool;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

import com.ren.ds.filter.Filter;
import com.ren.ds.filter.FilterChainImpl;
import com.ren.ds.pool.proxy.TransactionInfo;

public class PooledConnection extends WrapAdapter implements Connection {

    protected DataSource dataSource;
    protected Connection conn;
    protected TransactionInfo transactionInfo;
    private volatile boolean disable = false;
    private boolean closed = false;

    private long connectedTimeNano;

    public PooledConnection(DataSource ds, Connection conn) {
        this.dataSource = ds;
        this.conn = conn;
        this.connectedTimeNano = System.nanoTime();
    }

    public long getConnectedTimeNano() {
        return connectedTimeNano;
    }

    public void setConnectedTimeNano() {
        if (connectedTimeNano <= 0) {
            this.setConnectedTimeNano(System.nanoTime());
        }
    }

    public void setConnectedTimeNano(long connectedTimeNano) {
        this.connectedTimeNano = connectedTimeNano;
    }

    public void disable() {
        this.disable = true;
    }

    public boolean isDisable() {
        return disable;
    }

    public void reset() {
        disable = false;
        closed = false;
        setConnectedTimeNano(System.nanoTime());
    }
    public Connection getConnection() {
        return this.conn;
    }
    @Override
    public void close() throws SQLException {
        if (this.disable || this.closed) {
            return;
        }
        // 已经无法使用
        disable();
        // 保证关闭一次
        syncClose();
    }

    public synchronized void syncClose() throws SQLException {
        if (this.closed) {
            return;
        }
        this.closed = true;
        List<Filter> filters = dataSource.getProxyFilters();
        if (filters.size() > 0) {
            FilterChainImpl filterChain = new FilterChainImpl(dataSource);
//            dataSource_releaseConnection
            filterChain.dataSource_recycle(this);
        } else {
            recycle();
        }
    }

    public void recycle() throws SQLException {
        dataSource.recycle(this);
        transactionInfo = null;
    }

    public void checkState() {
        if (disable)
            throw new RuntimeException("the connection is closed, connectedTimeNano:" + connectedTimeNano);
    }

//    private void checkStateInternal() {
//        
//    }
    // ////////////////////

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        checkState();
        return conn.prepareStatement(sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
            throws SQLException {
        checkState();
        return conn.prepareStatement(sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
            int resultSetHoldability) throws SQLException {
        checkState();
        return conn.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        checkState();
        return conn.prepareStatement(sql, columnIndexes);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        checkState();
        return conn.prepareStatement(sql, columnNames);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        checkState();
        return conn.prepareStatement(sql, autoGeneratedKeys);
    }

    // ////////////////////

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        checkState();
        return conn.prepareCall(sql);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency,
            int resultSetHoldability) throws SQLException {
        checkState();
        return conn.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        checkState();
        return conn.prepareCall(sql, resultSetType, resultSetConcurrency);
    }

    // ////////////////////

    @Override
    public Statement createStatement() throws SQLException {
        checkState();
        return conn.createStatement();
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)
            throws SQLException {
        checkState();
        return conn.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        checkState();
        return conn.createStatement(resultSetType, resultSetConcurrency);
    }

    @Override
    public String nativeSQL(String sql) throws SQLException {
        checkState();
        return conn.nativeSQL(sql);
    }

    @Override
    public void setAutoCommit(boolean autoCommit) throws SQLException {
        checkState();
        conn.setAutoCommit(autoCommit);
    }

    @Override
    public boolean getAutoCommit() throws SQLException {
        checkState();
        return conn.getAutoCommit();
    }

    @Override
    public void commit() throws SQLException {
        checkState();
        conn.commit();
    }

    public TransactionInfo getTransactionInfo() {
        checkState();
        return transactionInfo;
    }

    @Override
    public void rollback() throws SQLException {
        checkState();
        conn.rollback();
    }

    @Override
    public Savepoint setSavepoint(String name) throws SQLException {
        return conn.setSavepoint(name);
    }

    @Override
    public void rollback(Savepoint savepoint) throws SQLException {
        checkState();
        conn.rollback(savepoint);
    }

    @Override
    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
        checkState();
        conn.releaseSavepoint(savepoint);
    }

    @Override
    public Clob createClob() throws SQLException {
        checkState();
        return conn.createClob();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return this.closed;
    }

    @Override
    public DatabaseMetaData getMetaData() throws SQLException {
        checkState();
        return conn.getMetaData();
    }

    @Override
    public void setReadOnly(boolean readOnly) throws SQLException {
        checkState();
        conn.setReadOnly(readOnly);
    }

    @Override
    public boolean isReadOnly() throws SQLException {
        checkState();
        return conn.isReadOnly();
    }

    @Override
    public void setCatalog(String catalog) throws SQLException {
        checkState();
        conn.setCatalog(catalog);
    }

    @Override
    public String getCatalog() throws SQLException {
        checkState();
        return conn.getCatalog();
    }

    @Override
    public void setTransactionIsolation(int level) throws SQLException {
        checkState();
        conn.setTransactionIsolation(level);
    }

    @Override
    public int getTransactionIsolation() throws SQLException {
        checkState();
        return conn.getTransactionIsolation();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        checkState();
        return conn.getWarnings();
    }

    @Override
    public void clearWarnings() throws SQLException {
        checkState();
        conn.clearWarnings();
    }

    @Override
    public Map<String, Class<?>> getTypeMap() throws SQLException {
        checkState();
        return conn.getTypeMap();
    }

    @Override
    public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
        checkState();
        conn.setTypeMap(map);
    }

    @Override
    public void setHoldability(int holdability) throws SQLException {
        checkState();
        conn.setHoldability(holdability);
    }

    @Override
    public int getHoldability() throws SQLException {
        checkState();
        return conn.getHoldability();
    }

    @Override
    public Savepoint setSavepoint() throws SQLException {
        checkState();
        return conn.setSavepoint();
    }

    @Override
    public Blob createBlob() throws SQLException {
        checkState();
        return conn.createBlob();
    }

    @Override
    public NClob createNClob() throws SQLException {
        checkState();
        return conn.createNClob();
    }

    @Override
    public SQLXML createSQLXML() throws SQLException {
        checkState();
        return conn.createSQLXML();
    }

    @Override
    public boolean isValid(int timeout) throws SQLException {
        checkState();
        return conn.isValid(timeout);
    }

    @Override
    public void setClientInfo(String name, String value) throws SQLClientInfoException {
        checkState();
        conn.setClientInfo(name, value);
    }

    @Override
    public void setClientInfo(Properties properties) throws SQLClientInfoException {
        checkState();
        conn.setClientInfo(properties);
    }

    @Override
    public String getClientInfo(String name) throws SQLException {
        checkState();
        return conn.getClientInfo(name);
    }

    @Override
    public Properties getClientInfo() throws SQLException {
        checkState();
        return conn.getClientInfo();
    }

    @Override
    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
        checkState();
        return conn.createArrayOf(typeName, elements);
    }

    @Override
    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
        checkState();
        return conn.createStruct(typeName, attributes);
    }

    public void setSchema(String schema) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    public String getSchema() throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    public void abort(Executor executor) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    public int getNetworkTimeout() throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

}
